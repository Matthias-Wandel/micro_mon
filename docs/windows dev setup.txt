Set up raspberry pi pico command line based development on windows, using
"windows system for linux" (wsl).

This eats up about 10 gigs of hard drive space.


There are IDEs that can program the pico, such as the arduino IDE, or wven
visual studio.  I personally just prefer doing it from the command line.

-----------------------------------------------------------------------------

# some useful notes
	https://learn.pimoroni.com/article/pico-development-using-wsl

Install wsl:
From command line:
	wsl  -- install =d Ubuntu
This installs ubuntu.

Installing the development environment:
	sudo apt update
	sudo apt install git cmake gcc-arm-none-eabi 
	sudo apt install libnewlib-arm-none-eabi build-essential
	sudo apt install libstdc++-arm-none-eabi-newlib

Installing the Pico repositories
	cd ~/
	mkdir pico
	cd pico
	git clone -b master https://github.com/raspberrypi/pico-sdk.git --recursive
	git clone -b master https://github.com/raspberrypi/pico-examples.git


in .bashrc. add the following (assuming PICO_W)
	export PICO_SDK_PATH=/home/mwandel/pico/pico-sdk
	export PICO_BOARD=pico_w
	export WIFI_SSID="82 starwood"
	export WIFI_PASSWORD=6132266151

Building the examples
	cd ~/pico/pico-examples
	mkdir build
	cd build
	cmake ..
	make


I was unable to get picotool working to my satisfaction, which is why I
prefer to run the development environment on a raspberry pi 4.

Get picotool
	git clone https://github.com/raspberrypi/picotool.git
	sudo apt-get install libusb-1.0-0-dev
	cd picotool
	mkdir build

But need libusb.  don't know what pkgconf does, but it made it work.
	sudo apt-get install libusb-dev
	sudo apt install pkgconf
	pkg-config libusb-1.0 --libs --cflags
	
Then build picotool:
	cd ~/pico/picotool
	mkdir build
	cd build
	cmake ..
	make

But this didn't work due to unable to initialize libUSB.  gave up on that.
But was able to download windows picotool
https://sourceforge.net/projects/rpi-pico-utils/
But unfortuantely this can't force a reboot like picotool running on a
raspbery pi 4 can do.  This makes picotool MUCH less useful under windows.

You can still load code onto your pi by unplugging it and plugging it back in
with the bootsel button held down and draggign your build .uf2 file onto the
drive that shows up, but this is not to my liking.






Hard drive sapce used up from all this:
171,380,236,288 bytes free
Installed wsl
168,962,285,568 bytes free
sudo apt install git cmake
168,570,847,232 bytes free
sudo apt install gcc-arm-none-eabi
sudo apt install libnewlib-arm-none-eabi
165,991,014,400
sudo apt install build-essential
sudo apt install libstdc++-arm-none-eabi-newlib
165,956,538,368 bytes free
5.5 gigs used!

git clone -b master https://github.com/raspberrypi/pico-sdk.git --recursive


162,131,333,120 bytes free


export PICO_SDK_PATH=/home/mwandel/pico/pico-sdk
